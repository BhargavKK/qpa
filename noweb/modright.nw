% -*- mode: Noweb; noweb-code-mode: text-mode -*-%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% HOPF Project Source File
% DESCRIPTION: General support for right modules
%
% Copyright, 1998, 1999 Virginia Polytechnic Institute and State University.
% Copyright, 1998, 1999 Virginia Tech Hopf Project. All rights reserved.
%
% This file may be distributed in accordance with the stipulations existing
% in the LICENSE file accompanying this software.
%
% $Id: modright.nw,v 1.1 2010/05/07 13:30:14 sunnyquiver Exp $
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\chapter{Right Modules}
\label{chapter:RightModules}

\section{Overview}
\label{section:RightModulesOverview}
This chapter contains support for right modules that is not contained
in the GAP4 library. GAP4 has support for left modules, and in most
cases the right module support needed is the same as the left module
support with a change in name from [[Left]] to [[Right]]. It is
expected that the right module support will be included in GAP4, but
for now we have it in \hopf.

\section{Source Files}
\label{section:RightModulesSourceFiles}

<<[[modright.gd]]>>=
# GAP Declarations
# This file was generated from
# $Id: modright.nw,v 1.1 2010/05/07 13:30:14 sunnyquiver Exp $
<<Declarations for Right Modules>>
@

<<[[modright.gi]]>>=
# GAP Implementation
# This file was generated from 
# $Id: modright.nw,v 1.1 2010/05/07 13:30:14 sunnyquiver Exp $
<<Implementations for Right Modules>>
@

\section{Categories and Families for Right Modules}
\label{section:RightModulesCategoriesAndFamilies}

This section does not contain anything yet as GAP4 has some basic
categories and families for right modules.

\section{Operations for Right Modules}
\label{section:RightModuleOperations}

\paragraph{Operation}
The [[RightModuleByGenerators]] operation creates a right module from
a collection of generating elements. This operation should eventually
end up in the GAP4 library (see \texttt{module.gd} and
\texttt{module.gi}).

<<Declaration of RightModuleByGenerators>>=
DeclareOperation( "RightModuleByGenerators", [IsRing, IsCollection] );
@ %def RightModuleByGenerators

This is the fundamental implementation of [[RightModuleByGenerators]]
for a ring and a collection of elements.

<<Implementation of RightModuleByGenerators>>=
InstallMethod( RightModuleByGenerators,
    "for ring and collection",
    true,
    [ IsRing, IsCollection ], 0,
    function( R, gens )
        local V;
        V := Objectify( NewType( FamilyObj( gens ),
                                 IsRightModule and IsAttributeStoringRep ),
                        rec() );
        SetRightActingDomain( V, R );
        SetGeneratorsOfRightModule( V, AsList( gens ) );
        return V;
    end );
@ 

This implementation includes specifying a zero module element.

<<Implementation of RightModuleByGenerators>>=
InstallOtherMethod( RightModuleByGenerators,
    "for ring, homogeneous list, and vector",
    true,
    [ IsRing, IsHomogeneousList, IsVector ], 0,
    function ( R, gens, zero )
        local V;

        V := Objectify( NewType( CollectionsFamily( FamilyObj( zero ) ),
                        IsRightModule and IsAttributeStoringRep ),
                        rec() );
        SetRightActingDomain( V, R );
        SetGeneratorsOfRightModule( V, AsList( gens ) );
        SetZero( V, zero );
        if IsEmpty( gens ) then
           SetIsTrivial( V, true );
        fi;
        return V;
     end );
@ 

\paragraph{Inclusion in Source}

<<Declarations for Right Modules>>=
<<Declaration of RightModuleByGenerators>>
@ 

<<Implementations for Right Modules>>=
<<Implementation of RightModuleByGenerators>>
@ 

\section{Right Module Mappings}

This section contains the necessary support for general mappings of
right modules. Most of this code is lifted from the corresponding left 
module code in the GAP4 library.

\paragraph{Attribute}
The [[IsRightModuleGeneralMapping]] is an additive group mapping that
respects scalar multiplication.

<<Declaration of IsRightModuleGeneralMapping>>=
DeclareSynonymAttr( "IsRightModuleGeneralMapping",
    IsAdditiveGroupGeneralMapping and RespectsScalarMultiplication );
@ %def IsRightModuleGeneralMapping

The [[IsRightModuleHomomorphism]] is a right module general mapping
that is also a mapping (in the GAP4 sense).

<<Declaration of IsRightModuleHomomorphism>>=
DeclareSynonymAttr( "IsRightModuleHomomorphism",
    IsRightModuleGeneralMapping and IsMapping );
@ %def IsRightModuleHomomorphism

We have an additional implementation of
[[RespectsScalarMultiplication]] for right modules. The one in GAP
only supports left modules.

<<Implementation of RespectsScalarMultiplication>>=
InstallMethod( RespectsScalarMultiplication,
    "for general mappings (right modules)",
    true,
    [IsGeneralMapping], 10,
    function( map )
        local S, R, D, pair, c;

        S := Source( map );
        R := Range( map );
        if not (IsRightModule(S) and IsRightModule(R)) then
            TryNextMethod();
        fi;

        D := RightActingDomain(S);

        if not IsSubset( RightActingDomain(R), D ) then
            return false;
        fi;

        map:= UnderlyingRelation( map );

        if not IsFinite( D ) or not IsFinite( map ) then
            Error( "cannot determine whether the infinite mapping <map> ",
                   "respects scalar multiplication" );
        else
            D:= Enumerator( D );
            for pair in Enumerator( map ) do
                for c in D do
                    if not Tuple( [ pair[1]*c, pair[2]*c ] ) in map then
                        return false;
                    fi;
                od;
            od;
            return true;
        fi;
    end );
@ 
