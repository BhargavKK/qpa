% -*- mode: Noweb; noweb-code-mode: gap-mode -*-%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% HOPF Project Source File
% DESCRIPTION: This file contains the coding standards for the Hopf project.
%
% Copyright, 1998 Virginia Polytechnic Institute and State University.
% Copyright, 1998 Virginia Tech Hopf Project. All rights reserved.
%
% This file may be distributed in accordance with the stipulations existing
% in the LICENSE file accompanying this software.
%
% $Id: codestds.nw,v 1.1 2010/05/07 13:30:13 sunnyquiver Exp $
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\chapter{Coding Standards}\label{chapter:Coding Standards}

\section{Overview}\label{section:CodingStandardsOverview}

This chapter presents the standards for source code format, file
naming, and code documentation for \hopf. Source code is written in
the GAP programming language, version 4. The source is contained in
the \hopf\ literate program created with the \noweb\ literate
programming tool.

\section{Code Chunk Naming}\label{section:Code Chunk Naming}
A \defitem{code chunk} is a portion of the \noweb\ literate program
that generates source code for \hopf. Code chunks should be named in
short phrases describing the purpose of the chunk.

\section{Source Code File}\label{section:Source Code File}
In order for a source code file to be generated, the developer selects
a \defitem{root chunk}, a code chunk that starts the output of a
source code file, using a command line option to the \texttt{notangle}
command. Root chunks are named as the file they generate surrounded by
\verb,[,\verb,[,\verb,],\verb,],. % Have to do this to avoid noweb conflict
This has two effects: the name is formatted in a fixed width font, and
the use of underscores in names is possible. This convention makes
root chunks easy to find in both the source files and printed
documentation.

In \hopf, file names should follow the general convention used by
GAP. Names must be compatible with the DOS naming scheme, up to eight
characters before the period and up to a three letter extension
following the period. The characters before the period describe the
domain or construction being implemented. In the case of specializing
a domain, an abbreviation of the general domain is followed by an
abbreviation of the specialization. Table~\ref{table:FileExtensions}
shows the extensions to use for source files.

\begin{table}[t]
  \begin{center}
    \begin{tabular}{|l|l|}
      \hline
      Extension & Usage \\ \hline
      \verb,.nw, & \noweb\ literate program source \\
      \verb,.gd, & GAP declarations \\
      \verb,.gi, & GAP implementation \\ \hline
    \end{tabular}
    \caption{\label{table:FileExtensions} Source file extensions and their use}
  \end{center}
\end{table}

The GAP declaration and implementation files that are generated by the
literate program must contain a comment describing what \noweb\ file
generated the GAP file. The \noweb\ filenames and the GAP filenames of
files generated by the \noweb\ files should generally differ only in
their extensions. The following are some examples of filenames
that adhere to the standard.

\begin{verbatim}
algpath.nw          - Noweb source for path algebras
algpath.gd          - GAP declarations for path algebras
algpath.gi          - GAP implementations for path algebras
quiver.nw           - Noweb source for quivers
quiver.gd           - GAP declarations for quivers
quiver.gi           - GAP implementations for quivers
\end{verbatim}

\section{Length of Code Chunks}\label{section:Length of Code Chunks}
Code chunks should be no longer than approximately half a printed
page. Code chunks that are longer should be broken into smaller code
chunks. More code chunks will not effect the running time of \hopf\ as
code is expanded completely by \noweb, and the resulting GAP code
contains no effects of multiple chunks.

\section{Indentation}\label{section:Indentation}

\begin{SLOPPY}
A \defitem{block} is a sequence of GAP statements inside of a
structured statement: \texttt{function ... end}, \texttt{if ... elif
... else ... fi}, \texttt{for ... do ... od}, \texttt{while ... do
... od}, \texttt{repeat ... until}.
Each block is to be indented four spaces in any GAP source code written.
\end{SLOPPY}

If a line is too long to fit in 80 characters, it should be split and
indented at least four characters from the previous line.

\section{Variable and Function Names}\label{section:Variable and Function Names}
Variables and functions should be named as descriptively as
possible. Variable names should begin with lower case letters and
variable names composed of multiple words should have each word
following the first capitalized. Function names should begin with
upper case letters and names composed of multiple words should have
each word capitalized.

If an algorithm is being transcribed directly from a reference, the
variable naming rule may be violated only in order to validate
correctness of the implementation.
