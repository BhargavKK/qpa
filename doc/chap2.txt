  
  [1X2 Quivers[0X
  
  
  [1X2.1 Information class, Quivers[0X
  
  A  quiver $Q$ is a set derived from a labeled directed multigraph with loops
  $\Gamma$.  An element of $Q$ is called a *path*, and falls into one of three
  classes.  The  first  class is the set of *vertices* of $\Gamma$. The second
  class  is  the  set  of  *walks* in $\Gamma$ of length at least one, each of
  which  is represented by the corresponding sequence of *arrows* in $\Gamma$.
  The  third  class  is  the  singleton set containing the distinguished *zero
  path*, usually denoted $0$. An associative multiplication is defined on $Q$.
  
  This  chapter  describes  the  functions  in  [5XQPA[0m  that  deal with paths and
  quivers.  The  functions  for constructing paths in Section [14X3.2[0m are normally
  not  useful  in  isolation; typically, they are invoked by the functions for
  constructing quivers in Section [14X2.2[0m.
  
  [1X2.1-1 InfoQuiver[0m
  
  [2X> InfoQuiver______________________________________________________[0Xinfo class
  
  is the info class for functions dealing with quivers.
  
  
  [1X2.2 Constructing Quivers[0X
  
  [1X2.2-1 Quiver[0m
  
  [2X> Quiver( [0X[3XN[, arrow1, arrow2, ...][0X[2X ) _______________________________[0Xfunction
  [2X> Quiver( [0X[3X[vertex1, vertex2, ..., ][arrow1, arrow2, ...][0X[2X ) _________[0Xfunction
  [2X> Quiver( [0X[3Xadjacencymatrix[0X[2X ) ________________________________________[0Xfunction
  [6XReturns:[0X  a quiver, which satisfies the property [2XIsQuiver[0m ([14X2.3-1[0m).
  
  The  first  construction takes the number [3XN[0m of vertices and a list of arrows
  to  specify the graph $\Gamma$ and hence the quiver. The second construction
  takes  a list of vertex names and a list of arrows for the same purpose. The
  third construction takes an adjacency matrix for the graph $\Gamma$.
  
  In  the first and third constructions, the vertices are named `v1, v2, ...'.
  In  the second construction, unique vertex names are given as strings in the
  list  that  is  the  first  parameter.  Each arrow is a list consisting of a
  source vertex and a target vertex, followed optionally by an arrow name as a
  string.
  
  Vertices  and arrows are referenced as record components using the dot (`.')
  operator.
  
  [4X---------------------------  Example  ----------------------------[0X
    [4Xgap> q1 := Quiver(["u","v"],[["u","u","a"],["u","v","b"],[0X
    [4X> ["v","u","c"],["v","v","d"]]);[0X
    [4X<quiver with 2 vertices and 4 arrows>[0X
    [4Xgap> VerticesOfQuiver(q1);[0X
    [4X[ u, v ][0X
    [4Xgap> ArrowsOfQuiver(q1);[0X
    [4X[ a, b, c, d ][0X
    [4Xgap> q2 := Quiver(2,[[1,1],[2,1],[1,2]]);[0X
    [4X<quiver with 2 vertices and 3 arrows>[0X
    [4Xgap> ArrowsOfQuiver(q2);[0X
    [4X[ a1, a2, a3 ][0X
    [4Xgap> VerticesOfQuiver(q2);[0X
    [4X[ v1, v2 ][0X
    [4Xgap> q3 := Quiver(2,[[1,1,"a"],[2,1,"b"],[1,2,"c"]]);[0X
    [4X<quiver with 2 vertices and 3 arrows>[0X
    [4Xgap> ArrowsOfQuiver(q3);[0X
    [4X[ a, b, c ][0X
    [4Xgap> q4 := Quiver([[1,1],[2,1]]);[0X
    [4X<quiver with 2 vertices and 5 arrows>[0X
    [4Xgap> VerticesOfQuiver(q4);[0X
    [4X[ v1, v2 ][0X
    [4Xgap> ArrowsOfQuiver(q4);[0X
    [4X[ a1, a2, a3, a4, a5 ][0X
    [4Xgap> SourceOfPath(q4.a2);[0X
    [4Xv1[0X
    [4Xgap> TargetOfPath(q4.a2);[0X
    [4Xv2[0X
  [4X------------------------------------------------------------------[0X
  
  [1X2.2-2 OrderedBy[0m
  
  [2X> OrderedBy( [0X[3Xquiver, ordering[0X[2X ) ____________________________________[0Xfunction
  [6XReturns:[0X  a  copy  of  [3Xquiver[0m  whose  elements  are ordered by [3Xordering[0m. The
            default  ordering  of  a  quiver is length left lexicographic. See
            Section [14X2.4[0m for more information.
  
  
  [1X2.3 Categories and Properties of Quivers[0X
  
  [1X2.3-1 IsQuiver[0m
  
  [2X> IsQuiver( [0X[3Xobject[0X[2X ) _______________________________________________[0Xproperty
  
  is true when [3Xobject[0m is a quiver.
  
  [1X2.3-2 IsAcyclic[0m
  
  [2X> IsAcyclic( [0X[3Xobject[0X[2X ) ______________________________________________[0Xproperty
  
  is true when [3Xobject[0m is a quiver with no cycles.
  
  [1X2.3-3 IsFinite[0m
  
  [2X> IsFinite( [0X[3Xobject[0X[2X ) _______________________________________________[0Xproperty
  
  is true when [3Xobject[0m is a finite set. Synonymous with `IsAcyclic'.
  
  [4X---------------------------  Example  ----------------------------[0X
    [4Xgap> quiver1 := Quiver(2,[[1,2]]);[0X
    [4X<quiver with 2 vertices and 1 arrows>[0X
    [4Xgap> IsQuiver("v1");[0X
    [4Xfalse[0X
    [4Xgap> IsQuiver(quiver1);[0X
    [4Xtrue[0X
    [4Xgap> IsAcyclic(quiver1);[0X
    [4Xtrue[0X
    [4Xgap> quiver2 := Quiver(["u","v"],[["u","v"],["v","u"]]);[0X
    [4X<quiver with 2 vertices and 2 arrows>[0X
    [4Xgap> IsAcyclic(quiver2);[0X
    [4Xfalse[0X
    [4Xgap> IsFinite(quiver1);[0X
    [4Xtrue[0X
    [4Xgap> IsFinite(quiver2);[0X
    [4Xfalse[0X
  [4X------------------------------------------------------------------[0X
  
  
  [1X2.4 Orderings of paths in a quiver[0X
  
  To be written.
  
  
  [1X2.5 Attributes and Operations for Quivers[0X
  
  [1X2.5-1 .[0m
  
  [2X> .( [0X[3XQ, element[0X[2X ) _________________________________________________[0Xoperation
  
  The  operation  [2X.[0m  operates  on  [3XQ[0m, a quiver, and an element, a vertex or an
  arrow,  to  allow access to generators of the quiver. If you have named your
  vertices  and  arrows  the the access looks like `[3XQ[0m.[3Xname of element[0m'. If you
  have not named the elements of the quiver then the default names are v1, v2,
  ... and a1, a2, ... in the order they are created.
  
  [1X2.5-2 VerticesOfQuiver[0m
  
  [2X> VerticesOfQuiver( [0X[3Xobject[0X[2X ) ______________________________________[0Xattribute
  
  An attribute. Returns a list of paths that are vertices in [3Xobject[0m.
  
  [1X2.5-3 ArrowsOfQuiver[0m
  
  [2X> ArrowsOfQuiver( [0X[3Xobject[0X[2X ) ________________________________________[0Xattribute
  
  An attribute. Returns a list of paths that are arrows in [3Xobject[0m.
  
  [1X2.5-4 AdjacencyMatrixOfQuiver[0m
  
  [2X> AdjacencyMatrixOfQuiver( [0X[3Xobject[0X[2X ) _______________________________[0Xattribute
  
  An attribute. Returns the adjacency matrix of [3Xobject[0m.
  
  [1X2.5-5 GeneratorsOfQuiver[0m
  
  [2X> GeneratorsOfQuiver( [0X[3Xobject[0X[2X ) ____________________________________[0Xattribute
  
  An attribute. Returns a list of the vertices and the arrows in [3Xobject[0m.
  
  [1X2.5-6 OrderOfQuiver[0m
  
  [2X> OrderOfQuiver( [0X[3Xobject[0X[2X ) _________________________________________[0Xattribute
  
  An attribute. Returns the number of vertices in [3Xobject[0m.
  
  [1X2.5-7 SizeOfQuiver[0m
  
  [2X> SizeOfQuiver( [0X[3Xobject[0X[2X ) __________________________________________[0Xattribute
  
  An attribute. Returns the number of arrows in [3Xobject[0m.
  
  [1X2.5-8 OrderingOfQuiver[0m
  
  [2X> OrderingOfQuiver( [0X[3Xobject[0X[2X ) ______________________________________[0Xattribute
  
  An  attribute.  Returns  the  ordering used to order elements in [3Xobject[0m. See
  Section [14X2.4[0m for more information.
  
  [1X2.5-9 OppositeOfQuiver[0m
  
  [2X> OppositeOfQuiver( [0X[3XQ[0X[2X ) ___________________________________________[0Xoperation
  
  This takes the quiver [3XQ[0m and produces the opposite quiver, where the vertices
  are  labelled  "name in original quiver" + "_op" and the arrows are labelled
  "name in orginal quiver" + "_op".
  
  [4X---------------------------  Example  ----------------------------[0X
    [4Xgap> q1 := Quiver(["u","v"],[["u","u","a"],["u","v","b"],[0X
    [4X> ["v","u","c"],["v","v","d"]]);[0X
    [4X<quiver with 2 vertices and 4 arrows>[0X
    [4Xgap> q1.a;[0X
    [4Xa[0X
    [4Xgap> q1.v;[0X
    [4Xv[0X
    [4Xgap> VerticesOfQuiver(q1);[0X
    [4X[ u, v ][0X
    [4Xgap> ArrowsOfQuiver(q1);[0X
    [4X[ a, b, c, d ][0X
    [4Xgap> AdjacencyMatrixOfQuiver(q1);[0X
    [4X[ [ 1, 1 ], [ 1, 1 ] ][0X
    [4Xgap> GeneratorsOfQuiver(q1);[0X
    [4X[ u, v, a, b, c, d ][0X
    [4Xgap> OrderOfQuiver(q1);[0X
    [4X2[0X
    [4Xgap> SizeOfQuiver(q1);[0X
    [4X4[0X
    [4Xgap> OrderingOfQuiver(q1);[0X
    [4X<length left lexicographic ordering>[0X
    [4Xgap> q1_op := OppositeOfQuiver(q1);[0X
    [4X<quiver with 2 vertices and 4 arrows>[0X
    [4Xgap> VerticesOfQuiver(q1);[0X
    [4X[ u_op, v_op ][0X
    [4Xgap> ArrowsOfQuiver(q1);[0X
    [4X[ a_op, b_op, c_op, d_op ][0X
  [4X------------------------------------------------------------------[0X
  
  
  [1X2.6 Categories and Properties of Paths[0X
  
  [1X2.6-1 IsPath[0m
  
  [2X> IsPath( [0X[3Xobject[0X[2X ) _________________________________________________[0Xcategory
  
  All path objects are in this category.
  
  [1X2.6-2 IsVertex[0m
  
  [2X> IsVertex( [0X[3Xobject[0X[2X ) _______________________________________________[0Xcategory
  
  All vertices are in this category.
  
  [1X2.6-3 IsArrow[0m
  
  [2X> IsArrow( [0X[3Xobject[0X[2X ) ________________________________________________[0Xcategory
  
  All arrows are in this category.
  
  [1X2.6-4 IsZeroPath[0m
  
  [2X> IsZeroPath( [0X[3Xobject[0X[2X ) _____________________________________________[0Xproperty
  
  is true when [3Xobject[0m is the zero path.
  
  [4X---------------------------  Example  ----------------------------[0X
    [4Xgap> q1 := Quiver(["u","v"],[["u","u","a"],["u","v","b"],[0X
    [4X> ["v","u","c"],["v","v","d"]]);[0X
    [4X<quiver with 2 vertices and 4 arrows>[0X
    [4Xgap> IsPath(q1.b);[0X
    [4Xtrue[0X
    [4Xgap> IsPath(q1.u);[0X
    [4Xtrue[0X
    [4Xgap> IsVertex(q1.c);[0X
    [4Xfalse[0X
    [4Xgap> IsZeroPath(q1.d);[0X
    [4Xfalse[0X
  [4X------------------------------------------------------------------[0X
  
  
  [1X2.7 Attributes and Operations of Paths[0X
  
  [1X2.7-1 SourceOfPath[0m
  
  [2X> SourceOfPath( [0X[3Xobject[0X[2X ) __________________________________________[0Xattribute
  
  An attribute. Returns the source (first) vertex of [3Xobject[0m.
  
  [1X2.7-2 TargetOfPath[0m
  
  [2X> TargetOfPath( [0X[3Xobject[0X[2X ) __________________________________________[0Xattribute
  
  An attribute. Returns the target (last) vertex of [3Xobject[0m.
  
  [1X2.7-3 LengthOfPath[0m
  
  [2X> LengthOfPath( [0X[3Xobject[0X[2X ) __________________________________________[0Xattribute
  
  An attribute. Returns the length of [3Xobject[0m.
  
  [1X2.7-4 WalkOfPath[0m
  
  [2X> WalkOfPath( [0X[3Xobject[0X[2X ) ____________________________________________[0Xattribute
  
  An attribute. Returns a list of the arrows that constitue [3Xobject[0m in order.
  
  [1X2.7-5 *[0m
  
  [2X> *( [0X[3Xp, q[0X[2X ) _______________________________________________________[0Xoperation
  
  The operation [2X*[0m operates on [3Xp[0m and [3Xq[0m, which are two paths in the same quiver.
  It returns the multiplication of the paths. If the paths are not in the same
  quiver  an  error is returned. If the target of [3Xp[0m differs from the source of
  [3Xq[0m,  then the result is the zero path. Otherwise, if either path is a vertex,
  then  the  result is the other path. Finally, if both are paths of length at
  least 1, then the result is the concatenation of the walks of the two paths.
  
  [4X---------------------------  Example  ----------------------------[0X
    [4Xgap> q1 := Quiver(["u","v"],[["u","u","a"],["u","v","b"],[0X
    [4X> ["v","u","c"],["v","v","d"]]);[0X
    [4X<quiver with 2 vertices and 4 arrows>[0X
    [4Xgap> SourceOfPath(q1.v);                                                       [0X
    [4Xv[0X
    [4Xgap> p1:=q1.a*q1.b*q1.d*q1.d;[0X
    [4Xa*b*d^2[0X
    [4Xgap> TargetOfPath(p1);[0X
    [4Xv[0X
    [4Xgap> p2:=q1.b*q1.b;[0X
    [4X0[0X
    [4Xgap> WalkOfPath(p1);[0X
    [4X[ a, b, d, d ][0X
    [4Xgap> WalkOfPath(q1.a);[0X
    [4X[ a ][0X
    [4Xgap> LengthOfPath(p1);[0X
    [4X4[0X
    [4Xgap> LengthOfPath(q1.v);[0X
    [4X0[0X
  [4X------------------------------------------------------------------[0X
  
  [1X2.7-6 =[0m
  
  [2X> =( [0X[3Xp, q[0X[2X ) _______________________________________________________[0Xoperation
  
  The  operation  [2X=[0m  operates on two paths [3Xp[0m and [3Xq[0m, and compares the paths for
  equality.  Two  paths  are  equal  if they have the same source and the same
  target  and  if  they  have the same walks. The paths [3Xp[0m and [3Xq[0m must be in the
  same quiver.
  
  [1X2.7-7 <[0m
  
  [2X> <( [0X[3Xp, q[0X[2X ) _______________________________________________________[0Xoperation
  
  The  operation  [2X<[0m  operates  on  two  paths  [3Xp[0m and [3Xq[0m, and compares them with
  respect  to  the  ordering of the quiver. This is meaningful only if [3Xp[0m and [3Xq[0m
  are in the same quiver.
  
  [4X---------------------------  Example  ----------------------------[0X
    [4Xgap> q1.a=q1.b;[0X
    [4Xfalse[0X
    [4Xgap> q1.a < q1.v;[0X
    [4Xfalse[0X
    [4Xgap> q1.a < q1.c;[0X
    [4Xtrue[0X
  [4X------------------------------------------------------------------[0X
  
  
  [1X2.8 Attributes of Vertices[0X
  
  [1X2.8-1 IncomingArrowsOfVertex[0m
  
  [2X> IncomingArrowsOfVertex( [0X[3Xobject[0X[2X ) ________________________________[0Xattribute
  
  An  attribute.  Returns  a  list  of  arrows  having  [3Xobject[0m as target. Only
  meaningful if [3Xobject[0m is in a quiver.
  
  [1X2.8-2 OutgoingArrowsOfVertex[0m
  
  [2X> OutgoingArrowsOfVertex( [0X[3Xobject[0X[2X ) ________________________________[0Xattribute
  
  An attribute. Returns a list of arrows having [3Xobject[0m as source.
  
  [1X2.8-3 InDegreeOfVertex[0m
  
  [2X> InDegreeOfVertex( [0X[3Xobject[0X[2X ) ______________________________________[0Xattribute
  
  An  attribute.  Returns  the  number of arrows having [3Xobject[0m as target. Only
  meaningful if [3Xobject[0m is in a quiver.
  
  [1X2.8-4 OutDegreeOfVertex[0m
  
  [2X> OutDegreeOfVertex( [0X[3Xobject[0X[2X ) _____________________________________[0Xattribute
  
  An attribute. Returns the number of arrows having [3Xobject[0m as source.
  
  [1X2.8-5 NeighborsOfVertex[0m
  
  [2X> NeighborsOfVertex( [0X[3Xobject[0X[2X ) _____________________________________[0Xattribute
  
  An  attribute. Returns a list of neighbors of [3Xobject[0m, that is, vertices that
  are targets of arrows having [3Xobject[0m as source.
  
  [4X---------------------------  Example  ----------------------------[0X
    [4Xgap> q1 := Quiver(["u","v"],[["u","u","a"],["u","v","b"],[0X
    [4X> ["v","u","c"],["v","v","d"]]);[0X
    [4X<quiver with 2 vertices and 4 arrows>[0X
    [4Xgap> OutgoingArrowsOfVertex(q1.u);[0X
    [4X[ a, b ][0X
    [4Xgap> InDegreeOfVertex(q1.u);[0X
    [4X2[0X
    [4Xgap> NeighborsOfVertex(q1.v);[0X
    [4X[ u, v ][0X
  [4X------------------------------------------------------------------[0X
  
