  
  [1X1 Introduction/Quick Start[0X
  
  This  chapter  is  intended for those who would like to get started with [5XQPA[0m
  right  away by playing with a few examples. An important feature to be aware
  of  concerning  using  the  software  is  how  to display the results one is
  obtaining.  Here  there  are  three  basic ways of doing this, through [10XView[0m,
  [10XPrint[0m  or  [10XDisplay[0m. The command [10XView(M)[0m prints a short information about the
  object  [10XM[0m, the command [10XPrint(M)[0m prints a longer information about the object
  [10XM[0m,  and  finally  The  command  [10XDisplay(M)[0m prints an even fuller information
  about  the  object  [10XM[0m,  in  general. However, for some objects these may all
  coincide. First we present a simple example:
  
  
  [1X1.1 Example 1[0X
  
  We construct a quiver $q$, i.e. a finite directed graph, with one vertex and
  two loops:
  
  [4X---------------------------  Example  ----------------------------[0X
    [4Xgap> q := Quiver(["u"],[["u","u","a"],["u","u","b"]]);[0X
    [4X<quiver with 1 vertices and 2 arrows>[0X
  [4X------------------------------------------------------------------[0X
  
  We can request the list of vertices and the list of arrows for $q$:
  
  [4X---------------------------  Example  ----------------------------[0X
    [4Xgap> VerticesOfQuiver(q);[0X
    [4X[ u ][0X
    [4Xgap> ArrowsOfQuiver(q);[0X
    [4X[ a, b ][0X
  [4X------------------------------------------------------------------[0X
  
  Next we create the path algebra $pa$ from $q$ over the rational numbers:
  
  [4X---------------------------  Example  ----------------------------[0X
    [4Xgap> pa := PathAlgebra(Rationals,q);[0X
    [4X<algebra-with-one over Rationals, with 3 generators>[0X
  [4X------------------------------------------------------------------[0X
  
  In  this  case  it  is  interesting  to  note  that we've created an algebra
  isomorphic  to the free algebra on two generators. We now retrieve and label
  the generators and multiplicative identity for $pa$:
  
  [4X---------------------------  Example  ----------------------------[0X
    [4Xgap> gens := GeneratorsOfAlgebra(pa);[0X
    [4X[ (1)*u, (1)*a, (1)*b ][0X
    [4Xgap> u := gens[1];[0X
    [4X(1)*u[0X
    [4Xgap> a := gens[2];[0X
    [4X(1)*a[0X
    [4Xgap> b := gens[3];[0X
    [4X(1)*b[0X
    [4Xgap> id := One(pa);[0X
    [4X(1)*u[0X
  [4X------------------------------------------------------------------[0X
  
  As  we  expect,  in  this case, the multiplicative identity for $pa$ and the
  single vertex $u$ are one in the same:
  
  [4X---------------------------  Example  ----------------------------[0X
    [4Xgap> u = id;[0X
    [4Xtrue[0X
  [4X------------------------------------------------------------------[0X
  
  We  now  create  a  list of generators for an ideal and ask for its Groebner
  basis:
  
  [4X---------------------------  Example  ----------------------------[0X
    [4Xgap> polys := [a*b*a-b,b*a*b-b];[0X
    [4X[ (-1)*b+(1)*a*b*a, (-1)*b+(1)*b*a*b ][0X
    [4Xgap> gb := GBNPGroebnerBasis(polys,pa);[0X
    [4X[ (-1)*a*b+(1)*b*a, (-1)*a*b+(1)*b^2, (-1)*b+(1)*a^2*b ][0X
  [4X------------------------------------------------------------------[0X
  
  Next,  we  create an ideal $I$ in {\GAP} using the Groebner basis $gb$ found
  above, and then the quotient $pa/I$:
  
  [4X---------------------------  Example  ----------------------------[0X
    [4Xgap> I := Ideal(pa,gb);[0X
    [4X<two-sided ideal in <algebra-with-one over Rationals, with 3[0X
    [4Xgenerators>, [0X
    [4X (3 generators)>[0X
  [4X------------------------------------------------------------------[0X
  
  Once  we  have  the  generators for a Groebner basis, we set the appropriate
  property for the ideal $I$:
  
  [4X---------------------------  Example  ----------------------------[0X
    [4Xgap> grb := GroebnerBasis(I,gb);    [0X
    [4X<partial two-sided Groebner basis containing 3 elements>[0X
  [4X------------------------------------------------------------------[0X
  
  
  [1X1.2 Example 2[0X
  
  In  this next example we create another path algebra that is essentially the
  free  algebra  on  six  generators.  We  then  find the Groebner basis for a
  commutative  example  from  (create  bibliographic  reference here) the book
  "Some  Tapas  of  Computer  Algebra" by A.M. Cohen, H. Cuypers, H. Sterk. We
  create the underlying quiver, and from it the path algebra over the rational
  numbers:
  
  [4X---------------------------  Example  ----------------------------[0X
    [4Xgap> q := Quiver(["u"],[["u","u","a"],["u","u","b"], ["u","u","c"],[0X
    [4X>                    ["u","u","d"],["u","u","e"],["u","u","f"]]);[0X
    [4X<quiver with 1 vertices and 6 arrows>[0X
    [4Xgap> fq := PathAlgebra(Rationals,q);[0X
    [4X<algebra-with-one over Rationals, with 7 generators>[0X
  [4X------------------------------------------------------------------[0X
  
  Next, the generators are labeled and the list of polynomials is entered:
  
  [4X---------------------------  Example  ----------------------------[0X
    [4Xgap> gens := GeneratorsOfAlgebra(fq);[0X
    [4X[ (1)*u, (1)*a, (1)*b, (1)*c, (1)*d, (1)*e, (1)*f ][0X
    [4Xgap> u := gens[1];; a := gens[2];; b := gens[3];; c := gens[4];;[0X
    [4Xgap> d := gens[5];; e := gens[6];; f := gens[7];;[0X
    [4Xgap> polys := [ e*a,[0X
    [4X>            a^3 + f*a,[0X
    [4X>            a^9 + c*a^3,[0X
    [4X>            a^81 + c*a^9 + d*a^3,[0X
    [4X>            a^27 + d*a^81 + e*a^9 + f*a^3,[0X
    [4X>            b + c*a^27 + e*a^81 + f*a^9,[0X
    [4X>            c*b + d*a^27 + f*a^81,[0X
    [4X>            a + d*b + e*a^27,[0X
    [4X>            c*a + e*b + f*a^27,[0X
    [4X>            d*a + f*b,[0X
    [4X>            b^3 - b,[0X
    [4X>            a*b - b*a, a*c - c*a,[0X
    [4X>            a*d - d*a, a*e - e*a,[0X
    [4X>            a*f - f*a, b*c - c*b,[0X
    [4X>            b*d - d*b, b*e - e*b,[0X
    [4X>            b*f - f*b, c*d - d*c,[0X
    [4X>            c*e - e*c, c*f - f*c,[0X
    [4X>            d*e - e*d, d*f - f*d,[0X
    [4X>            e*f - f*e[0X
    [4X> ];;[0X
  [4X------------------------------------------------------------------[0X
  
  Finally, the Groebner basis is found:
  
  [4X---------------------------  Example  ----------------------------[0X
    [4Xgap> gb := GBNPGroebnerBasis(polys,fq);[0X
    [4X[ (1)*a, (1)*b, (-1)*c*d+(1)*d*c, (-1)*c*e+(1)*e*c, (-1)*d*e+(1)*e*d,[0X
    [4X  (-1)*c*f+(1)*f*c, (-1)*d*f+(1)*f*d, (-1)*e*f+(1)*f*e ][0X
  [4X------------------------------------------------------------------[0X
  
  
  [1X1.3 Example 3[0X
  
  The next example is from B. Keller's PhD thesis, p. 26:
  
  [4X---------------------------  Example  ----------------------------[0X
    [4Xgap> q := Quiver(["u","v"],[["u","v","c"],["u","u","b"],["u","u","a"]]);[0X
    [4X<quiver with 2 vertices and 3 arrows>[0X
    [4Xgap> pa := PathAlgebra(Rationals,q);[0X
    [4X<algebra-with-one over Rationals, with 5 generators>[0X
    [4Xgap> [0X
    [4Xgap> # Get generators of path algebra:[0X
    [4Xgap> gens := GeneratorsOfAlgebra(pa);[0X
    [4X[ (1)*u, (1)*v, (1)*c, (1)*b, (1)*a ][0X
    [4Xgap> u := gens[1];; v := gens[2];; c := gens[3];;[0X
    [4Xgap> b := gens[4];; a := gens[5];; id := One(pa);;[0X
    [4Xgap> [0X
    [4Xgap> polys := [a*b*c+b*a*b+a+c];[0X
    [4X[ (1)*c+(1)*a+(1)*b*a*b+(1)*a*b*c ][0X
    [4Xgap> gb := GBNPGroebnerBasis(polys,pa);[0X
    [4X[ (-1)*b*c+(1)*a*c, (1)*a+(1)*b*a*b, (1)*c+(1)*a*b*c, (-1)*b*a^2+(1)*a^2*b ][0X
  [4X------------------------------------------------------------------[0X
  
  
  [1X1.4 Example 4[0X
  
  Here's an example that doesn't meet our necessary criteria that all elements
  in  a generating set have monomials in the arrow ideal. Since the given path
  algebra  is  isomorphic  to a free algebra, the single vertex is sent to the
  identity  and  there  are no complications. First, we set up the algebra and
  generating set:
  
  [4X---------------------------  Example  ----------------------------[0X
    [4Xgap> q := Quiver(["u"],[["u","u","x"],["u","u","y"]]);[0X
    [4X<quiver with 1 vertices and 2 arrows>[0X
    [4Xgap> f := Rationals;[0X
    [4XRationals[0X
    [4Xgap> fq := PathAlgebra(f,q);[0X
    [4X<algebra-with-one over Rationals, with 3 generators>[0X
    [4Xgap> [0X
    [4Xgap> # Get generators of path algebra:[0X
    [4Xgap> gens := GeneratorsOfAlgebra(fq);[0X
    [4X[ (1)*u, (1)*x, (1)*y ][0X
    [4Xgap> u := gens[1];; x := gens[2];; y := gens[3];; id := One(fq);;[0X
    [4Xgap> polys := [x*y-y*x,x^2*y-id,x*y^2-id];[0X
    [4X[ (1)*x*y+(-1)*y*x, (-1)*u+(1)*x^2*y, (-1)*u+(1)*x*y^2 ][0X
  [4X------------------------------------------------------------------[0X
  
  Then we ask GBNP for its Groebner basis:
  
  [4X---------------------------  Example  ----------------------------[0X
    [4Xgap> gb := GBNPGroebnerBasisNC(polys,fq);[0X
    [4XThe given path algebra is isomorphic to a free algebra.[0X
    [4X[ (-1)*x+(1)*y, (-1)*u+(1)*x^3 ][0X
  [4X------------------------------------------------------------------[0X
  
  NOTE:   It   is   important   to   realize   that  we've  used  the  routine
  `GBNPGroebnerBasisNC'  which doesn't check that all elements in a given list
  have  non-vertex  monomials.  So,  if we run the standard [5XQPA[0m Groebner basis
  routine on this example, we get the following:
  
  [4X---------------------------  Example  ----------------------------[0X
    [4Xgap> GBNPGroebnerBasis(polys,pa);[0X
    [4XPlease make sure all elements are in the given path algebra, [0X
    [4Xand each summand of each element is not (only) a vertex.[0X
    [4Xfalse[0X
  [4X------------------------------------------------------------------[0X
  
